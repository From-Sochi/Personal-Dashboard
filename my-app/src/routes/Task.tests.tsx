import '@testing-library/jest-dom';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import Tasks from './tasks';

jest.mock('../index.css', () => ({}));

describe('Tasks Component', () => {
    beforeEach(() => {
        jest.spyOn(console, 'error').mockImplementation(() => { });
    });

    afterEach(() => {
        jest.restoreAllMocks();
    });

    test('should render initial tasks', () => {
        render(<Tasks />);

        expect(screen.getByDisplayValue('Work')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Study')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Shop')).toBeInTheDocument();

        const deleteButtons = screen.getAllByText('Delete ‚úï');
        expect(deleteButtons).toHaveLength(3);
    });

    test('should update task name when input changes', async () => {
        const user = userEvent.setup();
        render(<Tasks />);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è input'–æ–≤ –∑–∞–¥–∞—á
        const taskInputs = screen.getAllByDisplayValue(/Work|Study|Shop/);
        const firstTaskInput = taskInputs[0];

        await user.clear(firstTaskInput);
        await user.type(firstTaskInput, 'New Task Name');

        expect(firstTaskInput).toHaveValue('New Task Name');
    });

    test('should delete a task when delete button is clicked', async () => {
        const user = userEvent.setup();
        render(<Tasks />);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
        expect(screen.getByDisplayValue('Work')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Study')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Shop')).toBeInTheDocument();

        // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
        const deleteButtons = screen.getAllByText('Delete ‚úï');
        await user.click(deleteButtons[0]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–∏–ª–∞—Å—å
        expect(screen.queryByDisplayValue('Work')).not.toBeInTheDocument();
        expect(screen.getByDisplayValue('Study')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Shop')).toBeInTheDocument();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á –ø–æ –∫–Ω–æ–ø–∫–∞–º —É–¥–∞–ª–µ–Ω–∏—è
        const remainingDeleteButtons = screen.getAllByText('Delete ‚úï');
        expect(remainingDeleteButtons).toHaveLength(2);
    });

    test('should add a new task when add button is clicked', async () => {
        const user = userEvent.setup();
        render(<Tasks />);

        const addInput = screen.getByPlaceholderText('Add new task...');
        const addButton = screen.getByText('Add');

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        await user.type(addInput, 'New Task');
        await user.click(addButton);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–∏–ª–∞—Å—å
        expect(screen.getByDisplayValue('New Task')).toBeInTheDocument();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ –∫–Ω–æ–ø–∫–∞–º —É–¥–∞–ª–µ–Ω–∏—è
        const deleteButtons = screen.getAllByText('Delete ‚úï');
        expect(deleteButtons).toHaveLength(4);
    });

    test('should add a new task when Enter key is pressed', async () => {
        const user = userEvent.setup();
        render(<Tasks />);

        const addInput = screen.getByPlaceholderText('Add new task...');

        await user.type(addInput, 'New Task{Enter}');
        expect(screen.getByDisplayValue('New Task')).toBeInTheDocument();

        const deleteButtons = screen.getAllByText('Delete ‚úï');
        expect(deleteButtons).toHaveLength(4);
    });

    test('should not add empty task', async () => {
        const user = userEvent.setup();
        render(<Tasks />);

        const addInput = screen.getByPlaceholderText('Add new task...');
        const addButton = screen.getByText('Add');

        await user.type(addInput, '   ');
        await user.click(addButton);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        const deleteButtons = screen.getAllByText('Delete ‚úï');
        expect(deleteButtons).toHaveLength(3);
    });

    test('should show empty state when all tasks are deleted', async () => {
        const user = userEvent.setup();
        render(<Tasks />);

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        const deleteButtons = screen.getAllByText('Delete ‚úï');
        for (const button of deleteButtons) {
            await user.click(button);
        }

        expect(screen.getByText('–¢—ã –≤—Å—ë —Å–¥–µ–ª–∞–ª, –¥—É—Ä–∞—á–æ–∫... üéâ')).toBeInTheDocument();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á (–∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è)
        expect(screen.queryByText('Delete ‚úï')).not.toBeInTheDocument();
    });

    test('should show motivational header when there are tasks', () => {
        render(<Tasks />);
        expect(screen.getByText('–ú–æ–∂–µ—Ç —Ö–≤–∞—Ç–∏—Ç?')).toBeInTheDocument();
    });

    test('should show lazy header when there are no tasks', async () => {
        const user = userEvent.setup();
        render(<Tasks />);

        const deleteButtons = screen.getAllByText('Delete ‚úï');
        for (const button of deleteButtons) {
            await user.click(button);
        }

        expect(screen.getByText('–ù–∞–∫–∏–¥–∞–π-–∫–∞ —Å–µ–±–µ –∑–∞–¥–∞—á, –ª–µ–Ω—Ç—è–π...')).toBeInTheDocument();
    });

    test('should maintain unique IDs when adding multiple tasks', async () => {
        const user = userEvent.setup();
        render(<Tasks />);

        const addInput = screen.getByPlaceholderText('Add new task...');
        const addButton = screen.getByText('Add');

        await user.type(addInput, 'Task 1');
        await user.click(addButton);

        await user.type(addInput, 'Task 2');
        await user.click(addButton);

        await user.type(addInput, 'Task 3');
        await user.click(addButton);

        expect(screen.getByDisplayValue('Task 1')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Task 2')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Task 3')).toBeInTheDocument();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
        const deleteButtons = screen.getAllByText('Delete ‚úï');
        expect(deleteButtons).toHaveLength(6);
    });
});



// ‚àö –î–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ (44 –º—Å)
// ‚àö –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–≤–æ–¥–∞ (307 –º—Å)
// ‚àö –î–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (69 –º—Å)
// ‚àö –î–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (215 –º—Å)
// ‚àö –î–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏ Enter (183 –º—Å)
// ‚àö –ù–µ –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—É—é –∑–∞–¥–∞—á—É (132 –º—Å)
// ‚àö –î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á (148 –º—Å)
// ‚àö –î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–¥–∞—á (5 –º—Å)
// ‚àö –î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–µ–Ω–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á (116 –º—Å)
// ‚àö –î–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á (556 –º—Å)